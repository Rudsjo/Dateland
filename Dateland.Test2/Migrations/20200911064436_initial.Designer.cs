// <auto-generated />
using System;
using Dateland.Test2.Core;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Dateland.Test2.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20200911064436_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Core.Model.City", b =>
                {
                    b.Property<int>("CityID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("CityID");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("Core.Model.Education", b =>
                {
                    b.Property<int>("EducationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("EducationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("EducationID");

                    b.ToTable("Educations");
                });

            modelBuilder.Entity("Core.Model.Food", b =>
                {
                    b.Property<int>("FoodID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FoodName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("FoodID");

                    b.ToTable("Foods");
                });

            modelBuilder.Entity("Core.Model.Gender", b =>
                {
                    b.Property<int>("GenderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("GenderType")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("GenderID");

                    b.ToTable("Genders");
                });

            modelBuilder.Entity("Core.Model.GenderPreferation", b =>
                {
                    b.Property<int>("GenderPreferationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("GenderPreferationType")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("GenderPreferationID");

                    b.ToTable("GenderPreferations");
                });

            modelBuilder.Entity("Core.Model.Movie", b =>
                {
                    b.Property<int>("MovieID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("MovieName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("MovieID");

                    b.ToTable("Movies");
                });

            modelBuilder.Entity("Core.Model.Music", b =>
                {
                    b.Property<int>("MusicID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("MusicGenre")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("MusicID");

                    b.ToTable("Music");
                });

            modelBuilder.Entity("Core.Model.Profession", b =>
                {
                    b.Property<int>("ProfessionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ProfessionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("ProfessionID");

                    b.ToTable("Professions");
                });

            modelBuilder.Entity("Core.Model.Relation", b =>
                {
                    b.Property<int>("RelationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("RelationType")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("RelationID");

                    b.ToTable("Relations");
                });

            modelBuilder.Entity("Core.Model.UserCityRelation", b =>
                {
                    b.Property<int>("UserCityID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CityID")
                        .HasColumnType("int");

                    b.Property<int?>("UserID")
                        .HasColumnType("int");

                    b.HasKey("UserCityID");

                    b.HasIndex("CityID");

                    b.HasIndex("UserID");

                    b.ToTable("UserCityRelations");
                });

            modelBuilder.Entity("Core.Model.UserEducationRelation", b =>
                {
                    b.Property<int>("UserEducationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("EducationID")
                        .HasColumnType("int");

                    b.Property<int?>("UserID")
                        .HasColumnType("int");

                    b.HasKey("UserEducationID");

                    b.HasIndex("EducationID");

                    b.HasIndex("UserID");

                    b.ToTable("UserEducationRelations");
                });

            modelBuilder.Entity("Core.Model.UserGenderPreferationRelation", b =>
                {
                    b.Property<int>("UserGenderPreferationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("GenderPreferationID")
                        .HasColumnType("int");

                    b.Property<int?>("UserID")
                        .HasColumnType("int");

                    b.HasKey("UserGenderPreferationID");

                    b.HasIndex("GenderPreferationID");

                    b.HasIndex("UserID");

                    b.ToTable("UserGenderPreferationRelations");
                });

            modelBuilder.Entity("Core.Model.UserProfessionRelation", b =>
                {
                    b.Property<int>("UserProfessionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ProfessionID")
                        .HasColumnType("int");

                    b.Property<int?>("UserID")
                        .HasColumnType("int");

                    b.HasKey("UserProfessionID");

                    b.HasIndex("ProfessionID");

                    b.HasIndex("UserID");

                    b.ToTable("UserProfessionRelations");
                });

            modelBuilder.Entity("Core.Model.UserRelationRelation", b =>
                {
                    b.Property<int>("UserRelationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("RelationID")
                        .HasColumnType("int");

                    b.Property<int?>("_FirstUserIDUserID")
                        .HasColumnType("int");

                    b.Property<int?>("_SecondUserIDUserID")
                        .HasColumnType("int");

                    b.HasKey("UserRelationID");

                    b.HasIndex("RelationID");

                    b.HasIndex("_FirstUserIDUserID");

                    b.HasIndex("_SecondUserIDUserID");

                    b.ToTable("UserRelationRelations");
                });

            modelBuilder.Entity("Dateland.Test2.Core.Interest", b =>
                {
                    b.Property<int>("InterestID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("InterestName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("InterestID");

                    b.ToTable("Interests");
                });

            modelBuilder.Entity("Dateland.Test2.Core.User", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CityID")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<int>("EducationID")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EmailConfirmed")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FoodID")
                        .HasColumnType("int");

                    b.Property<int>("GenderID")
                        .HasColumnType("int");

                    b.Property<int>("GenderPreferationID")
                        .HasColumnType("int");

                    b.Property<int>("InterestID")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MovieID")
                        .HasColumnType("int");

                    b.Property<int>("MusicID")
                        .HasColumnType("int");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProfessionID")
                        .HasColumnType("int");

                    b.Property<string>("ProfilePictureUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RelationID")
                        .HasColumnType("int");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserID");

                    b.HasIndex("CityID");

                    b.HasIndex("EducationID");

                    b.HasIndex("FoodID");

                    b.HasIndex("GenderID");

                    b.HasIndex("GenderPreferationID");

                    b.HasIndex("InterestID");

                    b.HasIndex("MovieID");

                    b.HasIndex("MusicID");

                    b.HasIndex("ProfessionID");

                    b.HasIndex("RelationID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Dateland.Test2.Core.UserInterestRelation", b =>
                {
                    b.Property<int>("UserInterestID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("InterestID")
                        .HasColumnType("int");

                    b.Property<int?>("UserID")
                        .HasColumnType("int");

                    b.HasKey("UserInterestID");

                    b.HasIndex("InterestID");

                    b.HasIndex("UserID");

                    b.ToTable("UserInterestRelations");
                });

            modelBuilder.Entity("Core.Model.UserCityRelation", b =>
                {
                    b.HasOne("Core.Model.City", "_City")
                        .WithMany()
                        .HasForeignKey("CityID");

                    b.HasOne("Dateland.Test2.Core.User", "_User")
                        .WithMany()
                        .HasForeignKey("UserID");
                });

            modelBuilder.Entity("Core.Model.UserEducationRelation", b =>
                {
                    b.HasOne("Core.Model.Education", "_Education")
                        .WithMany()
                        .HasForeignKey("EducationID");

                    b.HasOne("Dateland.Test2.Core.User", "_User")
                        .WithMany()
                        .HasForeignKey("UserID");
                });

            modelBuilder.Entity("Core.Model.UserGenderPreferationRelation", b =>
                {
                    b.HasOne("Core.Model.GenderPreferation", "_GenderPreferation")
                        .WithMany()
                        .HasForeignKey("GenderPreferationID");

                    b.HasOne("Dateland.Test2.Core.User", "_User")
                        .WithMany()
                        .HasForeignKey("UserID");
                });

            modelBuilder.Entity("Core.Model.UserProfessionRelation", b =>
                {
                    b.HasOne("Core.Model.Profession", "_Profession")
                        .WithMany()
                        .HasForeignKey("ProfessionID");

                    b.HasOne("Dateland.Test2.Core.User", "_User")
                        .WithMany()
                        .HasForeignKey("UserID");
                });

            modelBuilder.Entity("Core.Model.UserRelationRelation", b =>
                {
                    b.HasOne("Core.Model.Relation", "_Relation")
                        .WithMany()
                        .HasForeignKey("RelationID");

                    b.HasOne("Dateland.Test2.Core.User", "_FirstUserID")
                        .WithMany()
                        .HasForeignKey("_FirstUserIDUserID");

                    b.HasOne("Dateland.Test2.Core.User", "_SecondUserID")
                        .WithMany()
                        .HasForeignKey("_SecondUserIDUserID");
                });

            modelBuilder.Entity("Dateland.Test2.Core.User", b =>
                {
                    b.HasOne("Core.Model.City", "City")
                        .WithMany()
                        .HasForeignKey("CityID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Model.Education", "Education")
                        .WithMany()
                        .HasForeignKey("EducationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Model.Food", "Food")
                        .WithMany()
                        .HasForeignKey("FoodID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Model.Gender", "Gender")
                        .WithMany()
                        .HasForeignKey("GenderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Model.GenderPreferation", "GenderPreferation")
                        .WithMany()
                        .HasForeignKey("GenderPreferationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dateland.Test2.Core.Interest", "Interest")
                        .WithMany()
                        .HasForeignKey("InterestID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Model.Movie", "Movie")
                        .WithMany()
                        .HasForeignKey("MovieID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Model.Music", "Music")
                        .WithMany()
                        .HasForeignKey("MusicID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Model.Profession", "Profession")
                        .WithMany()
                        .HasForeignKey("ProfessionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Model.Relation", "Relation")
                        .WithMany()
                        .HasForeignKey("RelationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Dateland.Test2.Core.UserInterestRelation", b =>
                {
                    b.HasOne("Dateland.Test2.Core.Interest", "_Interest")
                        .WithMany()
                        .HasForeignKey("InterestID");

                    b.HasOne("Dateland.Test2.Core.User", "_User")
                        .WithMany()
                        .HasForeignKey("UserID");
                });
#pragma warning restore 612, 618
        }
    }
}
